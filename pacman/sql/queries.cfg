### Configuration files for queries
### queries are evaluated as regular expressions
### for inputing dictionaries use \"%s\" and not '' otherwise there will be problems in compatibility since dictionaries already use '
### for spanning multilines use a \ at the end of each line to be continued

[insert]
insert_population = "INSERT INTO populations (size, cell_instantiation_id, label) \
                    VALUES (%d, %d, '%s');" % (pop.size, cell_instantiation_id, pop.label)

insert_projection = "INSERT INTO projections (presynaptic_population_id, postsynaptic_population_id, method, parameters, size, plasticity_instantiation_id, target, label)  \
                    VALUES (%d, %d, (SELECT id FROM model_library.connector_types WHERE name=\"%s\"), \"%s\", %d, %d, \"%s\",\"%s\");"    \
                    % (proj.presynaptic_population.id, proj.postsynaptic_population.id, proj.method.__name__, proj.parameters, proj.size, proj.plasticity_id,  proj.target, proj.label)

insert_projection_no_plasticity = "INSERT INTO projections (presynaptic_population_id, postsynaptic_population_id, method, parameters, size, target, label)  \
                    VALUES (%d, %d, (SELECT id FROM model_library.connector_types WHERE name=\"%s\"), \"%s\", %d, \"%s\",\"%s\");"    \
                    % (proj.presynaptic_population.id, proj.postsynaptic_population.id, proj.method.__name__, proj.parameters, proj.size, proj.target, proj.label)

insert_assembly = "INSERT INTO assemblies (assembly_label)  \
                    VALUES ('%s');"    \
                    % (assembly.label)

insert_probe = "INSERT INTO probes (population_id, variable, save_to) VALUES (%d, '%s', '%s');" % (pop_id, variable, save_to)

insert_population_into_assembly = "INSERT INTO assembly_associations (assembly_id, member_id, type) VALUES (%d, %d, '%s');"  %  (assembly.id, member.id, member_type)

insert_cell_instantiation = "INSERT INTO cell_instantiation (parameters) VALUES (\"%s\");"   %   pop.cellparams

insert_cell_method = "INSERT INTO cell_methods (cell_instantiation_id, method_name, method_type) \
                     VALUES (%d, '%s', (SELECT id FROM model_library.cell_types WHERE name=\"%s\"));"  %   (cell_instantiation_id, method_name, pop.cellclass.__name__)

insert_plasticity_instantiation = "INSERT INTO plasticity_instantiation (parameters) VALUES (\"%s\");"   %   plasticity_instantiation.parameters

insert_plasticity_method = "INSERT INTO plasticity_methods (plasticity_instantiation_id, method_name, method_type) VALUES (%d, '%s', '%s');"  %   (plasticity_instantiation_id, method_name, method_type)

insert_rng = "INSERT INTO rng (type, seed) VALUES ('%s', %d);"   %   (rng.type, rng.seed)

insert_random_distribution = "INSERT INTO random_distribution (parameters, distribution, rng_id) VALUES ('%s', '%s', %d);"   %   (distr.parameters, distr.distribution, distr.rng.id)

last_inserted_row_id = "SELECT last_insert_rowid();"

### splitter queries
insert_part_population = 'INSERT INTO part_populations (population_id, size, offset) VALUES (%d, %d, %d)'   %   (population_id, remaining_neurons, offset)
insert_part_projection = "INSERT INTO \
    part_projections \
    (projection_id, presynaptic_part_population_id, postsynaptic_part_population_id, size, method, parameters, plasticity_instantiation_id, target) \
    VALUES (%d, %d, %d, %d, %d, \"%s\", %d, '%s');"  %   (projection['id'], presynaptic_part_population_id, postsynaptic_part_population_id, projection['size'], projection['method'], projection['parameters'], projection['plasticity_instantiation_id'], projection['target'])

insert_part_probe = 'INSERT INTO part_probes (part_population_id, probe_id, variable, save_to) \
    VALUES (%d, %d, \"%s\", \"%s\");' % (part_population_id, probe['id'], probe['variable'], probe['save_to'])

insert_group_into_map = "INSERT INTO map (processor_id, processor_group_id) VALUES (%d, %d);"   %   (processor_id, processor_group_id)

[db_mgmt]
import_model_library="attach database '%s/sql/model_library.db' as model_library;" % self.mydir
import_system_library="attach database '%s/sql/%s' as system_library;" % (self.mydir, system_library)

### sql_scripts don't need to be evaluated as regular expression, they just need to be called hence those value just store the respective paths for the sql scripts
[sql_scripts]
create_specs_db=sql/create_specs_db.sql
clean_net_db=sql/clean_net_db.sql
drop_net_db=sql/drop_net_db.sql
clean_part_db=sql/clean_part_db.sql


[select]
get_synaptic_flag = "SELECT synapse_flag \
    FROM projections proj join populations pop ON proj.postsynaptic_population_id = pop.id \
    JOIN cell_instantiation i ON pop.cell_instantiation_id = i.id \
    JOIN cell_methods m ON m.cell_instantiation_id = i.id   \
    JOIN cell_types t ON m.method_type = t.id   \
    JOIN model_library.synapse_types s ON t.id = s.cell_type_id  \
    AND target= synapse_name    \
    AND proj.id = %d;"  % projection_id


get_synaptic_translation = "select translation as synapse_translation from synapse_types \
    join model_library.cell_types t on cell_type_id = t.id \
    join cell_methods m on t.id = m.method_type \
    join cell_instantiation i on m.cell_instantiation_id = i.id \ 
    join populations p on i.id = p.cell_instantiation_id \
    join part_populations pp on p.id = pp.population_id \
    join map on pp.processor_group_id = map.processor_group_id \
    join processors proc on map.processor_id = proc.id \
    where x = %d and y = %d and p = %d;"    %   (x, y, p)


get_distinct_cell_method_types = "select distinct method_type, name, max_nuro_per_fasc from cell_methods join cell_types on model_library.cell_types.id = cell_methods.method_type order by method_type DESC;"

# ordering might be needed for plotting
get_populations_size_type_method = "select pop.id, pop.label, pop.size, pop.splitter_constraint, method_type, t.name, t.max_nuro_per_fasc \
    from populations pop \
    JOIN cell_instantiation i ON pop.cell_instantiation_id = i.id \
    JOIN cell_methods m ON m.cell_instantiation_id = i.id \
    join cell_types t on t.id = m.method_type \
    ORDER BY pop.id;"
    


get_part_populations_size_type_method = "select p.id, p.size, method_type, t.name, t.max_nuro_per_fasc \
    from part_populations p \
    JOIN populations pop ON p.population_id = pop.id  \
    JOIN cell_instantiation i ON pop.cell_instantiation_id = i.id \
    JOIN cell_methods m ON m.cell_instantiation_id = i.id \
    join cell_types t on t.id = m.method_type \
    WHERE p.id in (%s) ORDER BY p.size DESC;" % part_population_id



get_part_populations_size_type_by_method = 'select part_populations.id as part_population_id, \
    part_populations.size as part_populations_size, \
    m.method_type \
    from part_populations JOIN populations on populations.id = part_populations.population_id \
    JOIN cell_instantiation i ON populations.cell_instantiation_id = i.id \
    JOIN cell_methods m ON m.cell_instantiation_id = i.id \
    WHERE method_type = %d;'  %   method_id

get_part_populations = 'SELECT * FROM part_populations;'
get_part_populations_from_population_id = 'SELECT * FROM part_populations WHERE population_id = %d;'    % population_id
get_part_populations_from_part_population_id = 'SELECT * FROM part_populations WHERE id = %d;'    % part_population_id
get_postsynaptic_populations = 'SELECT * FROM projections where presynaptic_population_id = %d;'  % presynaptic_population_id
get_presynaptic_populations = 'SELECT * FROM projections where postsynaptic_population_id = %d;'  % postsynaptic_population_id

get_part_population_loc = "SELECT part_populations.id, x, y, p \
    FROM part_populations \
    JOIN map ON map.processor_group_id = part_populations.processor_group_id \
    JOIN processors on map.processor_id = processors.id \
    WHERE part_populations.id = %d;" % part_population_id

generic_select = 'SELECT %s FROM %s;'    % (fields, from_where)

get_connector_type = "select connector_types.name \
    from connector_types JOIN %s on method=connector_types.id \
    WHERE %s.id = %d"  %   (table_name, table_name, projection_id)

get_part_populations_from_processor = 'select part_populations.id, part_populations.size, part_populations.flags, part_populations.offset, population_order_id, m.method_type, i.parameters, start_id \
    from part_populations JOIN map on part_populations.processor_group_id = map.processor_group_id \
    JOIN populations on populations.id = part_populations.population_id \
    JOIN cell_instantiation i ON populations.cell_instantiation_id = i.id \
    JOIN cell_methods m ON m.cell_instantiation_id = i.id \
    where processor_id = %d ORDER BY population_order_id;' % processor_id   # ORDER BY is needed to pack them in the proper order!

get_synaptic_row_length = 'select max(a.synaptic_row_length) as synaptic_row_length \
    from part_projections a join part_populations b on b.id=a.postsynaptic_part_population_id \
    join map c on c.processor_group_id=b.processor_group_id \
    where c.processor_id=%d;' % processor_id

get_part_population_core_offset = 'select p1.id, p1.size, p1.population_order_id, \
    (select sum(size) from part_populations p2 \
    where p2.population_order_id<p1.population_order_id  and p2.processor_group_id = %d) as population_core_offset \
    from part_populations p1 \
    where p1.processor_group_id = %d;' % (group_id, group_id)

get_barrier_processors = 'select distinct p.p, p.is_io as is_io from map m, processors p \
    where m.processor_id = p.id and x = %d and y = %d order by y, x;' % (x, y)
    
get_image_map = "select distinct p.x, p.y, p.p, p.is_io, t.image_name, status \
    from map m \
    join processors p on processor_id = p.id \
    join part_populations pop on pop.processor_group_id = m.processor_group_id \
    join populations pop2 on pop.population_id = pop2.id \
    join cell_instantiation c on pop2.cell_instantiation_id = c.id \
    join cell_methods m2 on c.id = m2.cell_instantiation_id \
    join cell_types t on m2.method_type = t.id \
    %s \
    ORDER by x DESC, y DESC, p DESC;"    % (where_condition)

# actually this is a used chip map
get_probe_map = "select distinct x, y from processors proc \
                join map on processor_id = proc.id \
                join part_populations pop on pop.processor_group_id = map.processor_group_id"
    
get_processor_connections_map = "select preproc.x as pre_x, preproc.y as pre_y, preproc.p as pre_p, \
    postproc.x as post_x, postproc.y as post_y, postproc.p as post_p \
    from part_projections proj,  \
    map premap, \
    map postmap, \
    part_populations prepop, \
    part_populations postpop, \
    processors preproc, \
    processors postproc \
    where presynaptic_part_population_id = prepop.id \
    and prepop.processor_group_id = premap.processor_group_id \
    and preproc.id = premap.processor_id \
    and postsynaptic_part_population_id = postpop.id \
    and postpop.processor_group_id = postmap.processor_group_id \
    and postproc.id = postmap.processor_id;"


get_map = "select population_id, p.label, p.size, part_populations.id as part_population_id, part_populations.size as part_population_size, offset, start_id, end_id, x, y, p, part_populations.population_order_id,  \ 
            (select sum(size)-size from populations p1 where p1.id <= p.id) as absolute_start_id \
            FROM part_populations \ 
            JOIN map ON map.processor_group_id = part_populations.processor_group_id \
            JOIN processors on map.processor_id = processors.id \
            JOIN populations p on part_populations.population_id = p.id \
            %s \
            ORDER BY x, y, p;" % where_condition
            

       
#replacet by Sergio Davies on 30 Oct 2012 to return also plasticity method name
# gets parameters for plasticity_instantiation divided by core and returns plasticity method name
get_plasticity_parameters = "select distinct p.x, p.y, p.p, plast.parameters, proj.plasticity_instantiation_id, pop.id as population_id, plasticity_methods.method_type as method, plasticity_suffix. executable_suffix as suffix \
    from part_populations pop, part_projections proj, map m, processors p, plasticity_instantiation plast, plasticity_methods, plasticity_suffix \
    where postsynaptic_part_population_id = pop.id \
    and pop.processor_group_id = m.processor_group_id \
    and m.processor_id = p.id \
    and plast.id = proj.plasticity_instantiation_id \
    and plast.id = plasticity_methods.plasticity_instantiation_id \
    and plasticity_methods.method_type=plasticity_suffix.model_name"

    

[update]
update_part_popoulation_group = "update part_populations \
    set processor_group_id = %d, population_order_id = %d \
    where id = %d;" % (group, position_in_group, part_population_id)
update_part_population_start_id = "update part_populations \
    set start_id = %d where id = %d;" % (population_key_start, part_population_id)
update_part_population_end_id = "update part_populations \
    set end_id = %d where id = %d;" % (population_key_end, part_population_id)
update_part_population_mask = "update part_populations \
    set mask = %d where id = %d;" % (mask, part_population_id)
update_synaptic_row_length = "update part_projections \
    set synaptic_row_length = %d where id = %d;" % (synaptic_row_length, part_projection_id)    
update_projection_address = "update part_projections \
    set sdram_address = %d where id = %d;" %     (memory_address, part_projection_id)
update_core_offsets = "UPDATE part_populations \
    SET population_core_offset = %d WHERE id = %d" % (part_populations_core_offsets['population_core_offset'], part_populations_core_offsets['id'])
update_flag = "UPDATE part_populations \
    SET flags = %d WHERE id = %d" % (flag_value, part_population_id)
update_runtime = "UPDATE options SET value=%d WHERE name = 'runtime';"  % runtime
update_parameters_part_projection = "UPDATE part_projections SET parameters = \"%s\" WHERE id = %d;" % (parameters, part_projection_id)
update_population_parameters = "UPDATE cell_instantiation set parameters = \"%s\" WHERE id = \
                                                                    (select i.id from cell_instantiation i, populations p  WHERE p.id = %d and p.cell_instantiation_id = i.id);" % (parameters, id)
set_mapping_constraint = "UPDATE populations SET constraints = \"%s\" WHERE id = %d;" % (constraint, population_id)
set_population_splitting_constraint = "UPDATE populations SET splitter_constraint = %d WHERE id = %d;" % (n, population.id)

update_number_of_neurons_per_core = "UPDATE cell_types SET max_nuro_per_fasc = %d WHERE name = '%s';"   %   (number_of_neurons, neuron_name)


[grouper]
# get_grouping_constraints will return a series of distinct combination of constraints present in the network
get_grouping_rules = "select constraints, method_type, plasticity_id \
    from ( \
    select distinct pop1.id as pop_id, constraints, method_type, coalesce(max(plasticity_instantiation_id),0) as plasticity_id \
    from populations pop LEFT JOIN part_populations pop1 on pop1.population_id = pop.id \
    JOIN cell_instantiation i ON pop.cell_instantiation_id = i.id \
    JOIN cell_methods m ON m.cell_instantiation_id = i.id \
    LEFT JOIN part_projections proj ON proj.postsynaptic_part_population_id = pop1.id  \
    group by pop_id, pop1.id , constraints, method_type \
    order by constraints, method_type, plasticity_id \
    ) \
    group by constraints, method_type, plasticity_id;"

get_part_populations_by_rules = "select pop_id \n\
    from ( \n\
    select distinct pop1.id as pop_id, constraints, method_type, coalesce(max(plasticity_instantiation_id),0) as plasticity_id \n\
    from populations pop LEFT JOIN part_populations pop1 on pop1.population_id = pop.id \n\
    JOIN cell_instantiation i ON pop.cell_instantiation_id = i.id \n\
    JOIN cell_methods m ON m.cell_instantiation_id = i.id \n\
    LEFT JOIN part_projections proj ON proj.postsynaptic_part_population_id = pop1.id  \n\
    WHERE pop_id is not null \
    GROUP BY pop_id, constraints, method_type \n\
    ORDER BY constraints, method_type, plasticity_id \n\
    ) \
    WHERE constraints is %s AND method_type is %s AND plasticity_id is %s \n;" % (rules['constraints'], rules['method_type'], rules['plasticity_id'])


[application_monitoring]

insert_monitoring_projection = "INSERT INTO projections (presynaptic_population_id, postsynaptic_population_id, method, parameters, size, target, label)  \
                    VALUES (%d, %d, (SELECT id FROM model_library.connector_types WHERE name=\"AllToAllConnector\"), \"{\'weights\':1, \'delays\':1, 'allow_self_connections\':True}\", 1, \"excitatory\",\"SpikeDetection\");"    \
                    % (presynaptic_population_id, monitoring_population_id)


insert_monitoring_part_projection = "INSERT INTO \
    part_projections (projection_id, presynaptic_part_population_id, postsynaptic_part_population_id, size, method, parameters, plasticity_instantiation_id, target) VALUES (%d, %d, %d, 1, (SELECT id FROM model_library.connector_types WHERE name=\"AllToAllConnector\"), \"{\'weights\':1, \'delays\':1, 'allow_self_connections\':True}\", 0, \"excitatory\");"  %   (projection_id, pre_part_population_id, monitoring_part_pop_id)

